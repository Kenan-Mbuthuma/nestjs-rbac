import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Providers from "@/components/providers";
import type { ResourcesConfig } from "@aws-amplify/core";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// ✅ Amplify config setup (CI/dev safe)
if (typeof window === "undefined") {
  (async () => {
    try {
      const { Amplify } = await import("aws-amplify");

      if (process.env.NODE_ENV === "development" || process.env.CI === "true") {
        const dummyConfig: ResourcesConfig = {
          Auth: {
            Cognito: {
              userPoolId: "us-east-1_mock",
              userPoolClientId: "mockclientid",
              loginWith: {
                username: true,
              },
            },
          },
        };

        Amplify.configure(dummyConfig);
        console.log("✅ Amplify configured with dummy config (CI/dev)");
      } else {
        const awsExports = await import("../aws-exports");
        Amplify.configure(awsExports.default);
        console.log("✅ Amplify configured with aws-exports.js");
      }
    } catch (err) {
      console.warn("⚠️ Failed to configure Amplify:", err);
    }
  })();
}

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
